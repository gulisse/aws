{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap 5165aa47013ee280fadc","webpack:///./enhance.js","webpack:///external \"sjcl\"","webpack:///./src/AuthenticationHelper.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoUser.js","webpack:///./src/CognitoUserAttribute.js","webpack:///./src/CognitoUserSession.js","webpack:///./src/DateHelper.js","webpack:///external {\"root\":\"AWSCognito\",\"commonjs2\":\"aws-sdk\",\"commonjs\":\"aws-sdk\",\"amd\":\"aws-sdk\"}","webpack:///external {\"root\":\"window\",\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./src/AuthenticationDetails.js","webpack:///./src/CognitoUserPool.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","defineProperty","value","_src","keys","forEach","enumerable","get","_awsSdk","enhancements","CognitoIdentityServiceProvider","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_sjcl","sjcl","_jsbn","initN","AuthenticationHelper","PoolName","paranoia","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","codec","utf8String","toBits","poolName","words","random","randomWords","hexRandom","hex","fromBits","randomBigInt","smallABigInt","mod","stringRandom","base64","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","saltDevices","firstCharSalt","indexOf","verifierDevicesNotPadded","modPow","firstCharVerifierDevices","a","A","Error","B","firstCharA","firstCharB","AToHash","BToHash","UHexHash","finalU","bitArray","hashHex","sha256","Array","join","hexStr","ikm","salt","mac","misc","hmac","update","prk","digest","infoBitsUpdate","concat","String","fromCharCode","clamp","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","SaltToHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","SToHash","firstCharS","UValueToHash","firstCharU","hkdf","computehkdf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64url","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_interopRequireDefault","default","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","authDetails","callback","_this","authenticationHelper","getUserPoolId","getParanoia","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","secretBlockBits","SECRET_BLOCK","dateNow","getNowString","signature","signatureString","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","_this2","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this3","ANSWER","_this4","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","storage","window","localStorage","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this5","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","newPassword","Password","attributeName","Code","_this6","deviceGroupkey","clearCachedDeviceKeyAndPassword","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this7","clearCachedTokens","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","Paranoia","test","region","userPoolId","clientId","apiVersion","userAttributes","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"], root[\"window\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"], root[\"window\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(14);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _awsSdk = __webpack_require__(10);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _awsSdk.CognitoIdentityServiceProvider[key] = enhancements[key];\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\n\t   * Constructs a new AuthenticationHelper object\n\t   * @param {string} PoolName Cognito user pool name.\n\t   * @param {int} paranoia Random number generation paranoia level.\n\t   */\n\t  function AuthenticationHelper(PoolName, paranoia) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.paranoia = paranoia;\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\n\t   * @returns {BigInteger} small A, a random number\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\n\t     * @returns {BigInteger} large A, a value generated from small A\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random big integer\n\t     * @returns {BigInteger} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var words = sjcl.random.randomWords(32, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\n\t     * helper function to generate a random string\n\t     * @returns {string} a random value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      var words = sjcl.random.randomWords(10, this.paranoia);\n\t      var stringRandom = sjcl.codec.base64.fromBits(words);\n\t\n\t      return stringRandom;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in password hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Generated random value included in devices hash.\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} Value used to verify devices.\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\n\t     * Generate salts and compute verifier.\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\n\t     * @param {string} username User to generate verifier for.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var words = sjcl.random.randomWords(4, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t      var saltDevices = new _jsbn.BigInteger(hexRandom, 16);\n\t      var firstCharSalt = saltDevices.toString(16)[0];\n\t      this.SaltToHashDevices = saltDevices.toString(16);\n\t\n\t      if (saltDevices.toString(16).length % 2 === 1) {\n\t        this.SaltToHashDevices = '0' + this.SaltToHashDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        this.SaltToHashDevices = '00' + this.SaltToHashDevices;\n\t      }\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      var firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n\t      this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\t\n\t      if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n\t        this.verifierDevices = '0' + this.verifierDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n\t        this.verifierDevices = '00' + this.verifierDevices;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's public value A = g^a%N\n\t     * with the generated random number a\n\t     * @param {BigInteger} a Randomly generated small A.\n\t     * @returns {BigInteger} Computed large A.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\n\t     * Calculate the client's value U which is the hash of A and B\n\t     * @param {BigInteger} A Large A value.\n\t     * @param {BigInteger} B Server B value.\n\t     * @returns {BigInteger} Computed U value.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      var firstCharA = A.toString(16)[0];\n\t      var firstCharB = B.toString(16)[0];\n\t      var AToHash = A.toString(16);\n\t      var BToHash = B.toString(16);\n\t\n\t      if (A.toString(16).length % 2 === 1) {\n\t        AToHash = '0' + AToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n\t        AToHash = '00' + AToHash;\n\t      }\n\t\n\t      if (B.toString(16).length % 2 === 1) {\n\t        BToHash = '0' + BToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n\t        BToHash = '00' + BToHash;\n\t      }\n\t\n\t      this.UHexHash = this.hexHash(AToHash + BToHash);\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a bitArray\n\t     * @param {sjcl.bitArray} bitArray Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(bitArray) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Calculate a hash from a hex string\n\t     * @param {String} hexStr Value to hash.\n\t     * @returns {String} Hex-encoded hash.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\n\t     * Standard hkdf algorithm\n\t     * @param {sjcl.bitArray} ikm Input key material.\n\t     * @param {sjcl.bitArray} salt Salt value.\n\t     * @returns {sjcl.bitArray} Strong key material.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n\t      mac.update(ikm);\n\t      var prk = mac.digest();\n\t      var hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n\t      var infoBitsUpdate = sjcl.bitArray.concat(this.infoBits, sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n\t      hmac.update(infoBitsUpdate);\n\t\n\t      return sjcl.bitArray.clamp(hmac.digest(), 128);\n\t    }\n\t\n\t    /**\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\n\t     * @param {String} username Username.\n\t     * @param {String} password Password.\n\t     * @param {BigInteger} serverBValue Server B value.\n\t     * @param {BigInteger} salt Generated salt.\n\t     * @returns {sjcl.bitArray} Computed HKDF value.\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var firstCharSalt = salt.toString(16)[0];\n\t      var SaltToHash = salt.toString(16);\n\t\n\t      if (salt.toString(16).length % 2 === 1) {\n\t        SaltToHash = '0' + SaltToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        SaltToHash = '00' + SaltToHash;\n\t      }\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var SToHash = sValue.toString(16);\n\t      var firstCharS = sValue.toString(16)[0];\n\t\n\t      if (sValue.toString(16).length % 2 === 1) {\n\t        SToHash = '0' + SToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n\t        SToHash = '00' + SToHash;\n\t      }\n\t\n\t      var UValueToHash = this.UHexHash;\n\t      var firstCharU = this.UHexHash[0];\n\t\n\t      if (this.UHexHash.length % 2 === 1) {\n\t        UValueToHash = '0' + UValueToHash;\n\t      } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n\t        UValueToHash = '00' + UValueToHash;\n\t      }\n\t\n\t      var hkdf = this.computehkdf(sjcl.codec.hex.toBits(SToHash), sjcl.codec.hex.toBits(UValueToHash));\n\t\n\t      return hkdf;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\n\t   * Constructs a new CognitoAccessToken object\n\t   * @param {string=} AccessToken The JWT access token.\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\n\t   * Constructs a new CognitoIdToken object\n\t   * @param {string=} IdToken The JWT Id token\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the token's expiration (exp member).\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\n\t   * Constructs a new CognitoRefreshToken object\n\t   * @param {string=} RefreshToken The JWT refresh token.\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's token.\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * @callback nodeCallback\n\t * @template T result\n\t * @param {*} err The operation failure reason, or null.\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback onFailure\n\t * @param {*} err Failure reason.\n\t */\n\t\n\t/**\n\t * @callback onSuccess\n\t * @template T result\n\t * @param {T} result The operation result.\n\t */\n\t\n\t/**\n\t * @callback mfaRequired\n\t * @param {*} details MFA challenge details.\n\t */\n\t\n\t/**\n\t * @callback customChallenge\n\t * @param {*} details Custom challenge details.\n\t */\n\t\n\t/**\n\t * @callback inputVerificationCode\n\t * @param {*} data Server response.\n\t */\n\t\n\t/**\n\t * @callback authSuccess\n\t * @param {CognitoUserSession} session The new session.\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\n\t   * Constructs a new CognitoUser object\n\t   * @param {object} data Creation options\n\t   * @param {string} data.Username The user's username.\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoUserSession} the current session for this user\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the user's username\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {String} the authentication flow type\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * sets authentication flow type\n\t     * @param {string} authenticationFlowType New value.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n\t     * stuff\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n\t     * @param {customChallenge} callback.customChallenge\n\t     *    Custom challenge response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.pool.getUserPoolId().split('_')[1]));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.username));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'SMS_MFA') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            return callback.mfaRequired(challengeName);\n\t          }\n\t\n\t          if (challengeName === 'CUSTOM_CHALLENGE') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n\t          }\n\t\n\t          if (challengeName === 'DEVICE_SRP_AUTH') {\n\t            _this.getDeviceResponse(callback);\n\t            return undefined;\n\t          }\n\t\n\t          _this.signInUserSession = _this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this.cacheTokens();\n\t\n\t          var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t          if (newDeviceMetadata == null) {\n\t            return callback.onSuccess(_this.signInUserSession);\n\t          }\n\t\n\t          authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t          var deviceSecretVerifierConfig = {\n\t            Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t            PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t          };\n\t\n\t          _this.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t          _this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t          _this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t          _this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t            DeviceKey: newDeviceMetadata.DeviceKey,\n\t            AccessToken: _this.signInUserSession.getAccessToken().getJwtToken(),\n\t            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t            DeviceName: navigator.userAgent\n\t          }, function (errConfirm, dataConfirm) {\n\t            if (errConfirm) {\n\t              return callback.onFailure(errConfirm);\n\t            }\n\t            _this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t            _this.cacheDeviceKeyAndPassword();\n\t            if (dataConfirm.UserConfirmationNecessary === true) {\n\t              return callback.onSuccess(_this.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t            }\n\t            return callback.onSuccess(_this.signInUserSession);\n\t          });\n\t          return undefined;\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session using device authentication. It is called at the end of user\n\t     * authentication\n\t     *\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this2 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey, this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this2.deviceKey, _this2.randomPassword, serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this2.deviceGroupKey));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this2.deviceKey));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this2.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this2.deviceKey;\n\t\n\t        _this2.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this2.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this2.signInUserSession = _this2.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this2.cacheTokens();\n\t\n\t          return callback.onSuccess(_this2.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has the responses to a custom challenge\n\t     * @param {string} answerChallenge The custom challange answer.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {customChallenge} callback.customChallenge\n\t     *    Custom challenge response required to continue.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this3 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this3.Session = data.Session;\n\t          return callback.customChallenge(data.challengeParameters);\n\t        }\n\t\n\t        _this3.signInUserSession = _this3.getCognitoUserSession(data.AuthenticationResult);\n\t        _this3.cacheTokens();\n\t        return callback.onSuccess(_this3.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by the user once he has an MFA code\n\t     * @param {string} confirmationCode The MFA code entered by the user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this4 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this4.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this4.pool.getUserPoolId().split('_')[1], _this4.pool.getParanoia());\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t        };\n\t\n\t        _this4.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t        _this4.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this4.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this4.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this4.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to change the current password\n\t     * @param {string} oldUserPassword The current password.\n\t     * @param {string} newUserPassword The requested new password.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to enable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to disable MFA for himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete himself\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n\t     */\n\t    /**\n\t     * This is used by an authenticated user to change a list of attributes\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to get a list of attributes\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by an authenticated user to delete a list of attributes\n\t     * @param {string[]} attributeList Names of the attributes to delete.\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used by a user to resend a confirmation code\n\t     * @param {nodeCallback<string>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to get a session, either from the session object\n\t     * or from  the local storage, or by using a refresh token\n\t     *\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This uses the refreshToken to retrieve a new session\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this5 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(lastUserKey)) {\n\t        this.username = storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this5.signInUserSession = _this5.getCognitoUserSession(authenticationResult);\n\t          _this5.cacheTokens();\n\t          return callback(null, _this5.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to save the session tokens to local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\n\t     * This is used to cache the device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.setItem(deviceKeyKey, this.deviceKey);\n\t      storage.setItem(randomPasswordKey, this.randomPassword);\n\t      storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to get current device key and device group and device password\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        this.randomPassword = storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the device key info from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.removeItem(deviceKeyKey);\n\t      storage.removeItem(randomPasswordKey);\n\t      storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to clear the session tokens from local storage\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.removeItem(idTokenKey);\n\t      storage.removeItem(accessTokenKey);\n\t      storage.removeItem(refreshTokenKey);\n\t      storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\n\t     * This is used to build a user session from tokens retrieved in the authentication result\n\t     * @param {object} authResult Successful auth response from server.\n\t     * @returns {CognitoUserSession} The new user session.\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate a forgot password request\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\n\t     *    Optional callback raised instead of onSuccess with response data.\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm a new password using a confirmationCode\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {string} newPassword Confirm new password.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * This is used to initiate an attribute confirmation request\n\t     * @param {string} attributeName User attribute that needs confirmation.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to confirm an attribute using a confirmation code\n\t     * @param {string} attributeName Attribute being confirmed.\n\t     * @param {string} confirmationCode Code entered by user.\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to get the device information using the current device key\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to forget the current device\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this6 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this6.deviceKey = null;\n\t        _this6.deviceGroupkey = null;\n\t        _this6.randomPassword = null;\n\t        _this6.clearCachedDeviceKeyAndPassword();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to set the device status as not remembered\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to list all devices for a user\n\t     *\n\t     * @param {int} limit the number of devices returned in a call\n\t     * @param {string} paginationToken the pagination token in case any was returned before\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used to globally revoke all tokens issued to a user\n\t     * @param {object} callback Result callback map.\n\t     * @param {onFailure} callback.onFailure Called on any error.\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\n\t   * Constructs a new CognitoUserAttribute object\n\t   * @param {string=} Name The record's name\n\t   * @param {string=} Value The record's value\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var Name = _ref.Name;\n\t    var Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's value.\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's value.\n\t     * @param {string} value The new value.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's name.\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\n\t     * Sets the record's name\n\t     * @param {string} name The new name.\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} a string representation of the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\n\t     * @returns {object} a flat object representing the record.\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\n\t   * Constructs a new CognitoUserSession object\n\t   * @param {string} IdToken The session's Id token.\n\t   * @param {string=} RefreshToken The session's refresh token.\n\t   * @param {string} AccessToken The session's access token.\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var IdToken = _ref.IdToken;\n\t    var RefreshToken = _ref.RefreshToken;\n\t    var AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\n\t   * @returns {CognitoIdToken} the session's Id token\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoRefreshToken} the session's refresh token\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\n\t     * @returns {CognitoAccessToken} the session's access token\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\n\t     * Checks to see if the session is still valid based on session expiry information found\n\t     * in tokens and the current time\n\t     * @returns {boolean} if the session is still valid\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t  function DateHelper() {\n\t    _classCallCheck(this, DateHelper);\n\t  }\n\t\n\t  _createClass(DateHelper, [{\n\t    key: 'getNowString',\n\t\n\t    /**\n\t     * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n\t     */\n\t    value: function getNowString() {\n\t      var now = new Date();\n\t\n\t      var weekDay = weekNames[now.getUTCDay()];\n\t      var month = monthNames[now.getUTCMonth()];\n\t      var day = now.getUTCDate();\n\t\n\t      var hours = now.getUTCHours();\n\t      if (hours < 10) {\n\t        hours = '0' + hours;\n\t      }\n\t\n\t      var minutes = now.getUTCMinutes();\n\t      if (minutes < 10) {\n\t        minutes = '0' + minutes;\n\t      }\n\t\n\t      var seconds = now.getUTCSeconds();\n\t      if (seconds < 10) {\n\t        seconds = '0' + seconds;\n\t      }\n\t\n\t      var year = now.getUTCFullYear();\n\t\n\t      // ddd MMM D HH:mm:ss UTC YYYY\n\t      var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t      return dateNow;\n\t    }\n\t  }]);\n\t\n\t  return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\n\t * Copyright 2016 Amazon.com,\n\t * Inc. or its affiliates. All Rights Reserved.\n\t *\n\t * Licensed under the Amazon Software License (the \"License\").\n\t * You may not use this file except in compliance with the\n\t * License. A copy of the License is located at\n\t *\n\t *     http://aws.amazon.com/asl/\n\t *\n\t * or in the \"license\" file accompanying this file. This file is\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\n\t * for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\n\t   * Constructs a new AuthenticationDetails object\n\t   * @param {object=} data Creation options.\n\t   * @param {string} data.Username User being authenticated.\n\t   * @param {string} data.Password Plain-text password to authenticate with.\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {};\n\t\n\t    var ValidationData = _ref.ValidationData;\n\t    var Username = _ref.Username;\n\t    var Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the record's username\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the record's password\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\n\t     * @returns {Array} the record's validationData\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\n\topyright 2016 Amazon.com,\n\tnc. or its affiliates. All Rights Reserved.\n\tn\ticensed under the Amazon Software License (the \"License\").\n\tou may not use this file except in compliance with the\n\ticense. A copy of the License is located at\n\tn\thttp://aws.amazon.com/asl/\n\tn\tor in the \"license\" file accompanying this file. This file is\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\texpress or implied. See the License\n\tfor the specific language governing permissions and\n\tlimitations under the License.\n\tn\t\n\tvar _awsSdk = __webpack_require__(10);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\n\t   * Constructs a new CognitoUserPool object\n\t   * @param {object} data Creation options.\n\t   * @param {string} data.UserPoolId Cognito user pool id.\n\t   * @param {string} data.ClientId User pool application client id.\n\t   * @param {int=} data.Paranoia Random number generation paranoia level.\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {};\n\t\n\t    var UserPoolId = _ref.UserPoolId;\n\t    var ClientId = _ref.ClientId;\n\t    var Paranoia = _ref.Paranoia;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t    this.paranoia = Paranoia || 0;\n\t\n\t    this.client = new _awsSdk.CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region: region });\n\t  }\n\t\n\t  /**\n\t   * @returns {string} the user pool id\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\n\t     * @returns {string} the client id\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\n\t     * @returns {int} the paranoia level\n\t     */\n\t\n\t  }, {\n\t    key: 'getParanoia',\n\t    value: function getParanoia() {\n\t      return this.paranoia;\n\t    }\n\t\n\t    /**\n\t     * sets paranoia level\n\t     * @param {int} paranoia The new paranoia level.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'setParanoia',\n\t    value: function setParanoia(paranoia) {\n\t      this.paranoia = paranoia;\n\t    }\n\t\n\t    /**\n\t     * @typedef {object} SignUpResult\n\t     * @property {CognitoUser} user New user.\n\t     * @property {bool} userConfirmed If the user is already confirmed.\n\t     */\n\t    /**\n\t     * method for signing up a user\n\t     * @param {string} username User's username.\n\t     * @param {string} password Plain-text initial password entered by user.\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n\t     * @returns {void}\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * method for getting the current user of the application from the local storage\n\t     *\n\t     * @returns {CognitoUser} the user retrieved from storage\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t      var storage = window.localStorage;\n\t\n\t      var lastAuthUser = storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** amazon-cognito-identity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5165aa47013ee280fadc\n **/","import { CognitoIdentityServiceProvider } from 'aws-sdk';\nimport * as enhancements from './src';\n\nexport * from './src';\n\nObject.keys(enhancements).forEach(key => {\n  CognitoIdentityServiceProvider[key] = enhancements[key];\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./enhance.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"sjcl\"\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\nimport { BigInteger } from 'jsbn';\n\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\n/** @class */\nexport default class AuthenticationHelper {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   * @param {int} paranoia Random number generation paranoia level.\n   */\n  constructor(PoolName, paranoia) {\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2');\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\n\n    this.paranoia = paranoia;\n\n    this.smallAValue = this.generateRandomSmallA();\n    this.largeAValue = this.calculateA(this.smallAValue);\n\n    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n  getSmallAValue() {\n    return this.smallAValue;\n  }\n\n  /**\n   * @returns {BigInteger} large A, a value generated from small A\n   */\n  getLargeAValue() {\n    return this.largeAValue;\n  }\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n  generateRandomSmallA() {\n    const words = sjcl.random.randomWords(32, this.paranoia);\n    const hexRandom = sjcl.codec.hex.fromBits(words);\n\n    const randomBigInt = new BigInteger(hexRandom, 16);\n    const smallABigInt = randomBigInt.mod(this.N);\n\n    return smallABigInt;\n  }\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n  generateRandomString() {\n    const words = sjcl.random.randomWords(10, this.paranoia);\n    const stringRandom = sjcl.codec.base64.fromBits(words);\n\n    return stringRandom;\n  }\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n  getRandomPassword() {\n    return this.randomPassword;\n  }\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n  getSaltDevices() {\n    return this.SaltToHashDevices;\n  }\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n  getVerifierDevices() {\n    return this.verifierDevices;\n  }\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @returns {void}\n   */\n  generateHashDevice(deviceGroupKey, username) {\n    this.randomPassword = this.generateRandomString();\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\n    const hashedString = this.hash(combinedString);\n\n    const words = sjcl.random.randomWords(4, this.paranoia);\n    const hexRandom = sjcl.codec.hex.fromBits(words);\n    const saltDevices = new BigInteger(hexRandom, 16);\n    const firstCharSalt = saltDevices.toString(16)[0];\n    this.SaltToHashDevices = saltDevices.toString(16);\n\n    if (saltDevices.toString(16).length % 2 === 1) {\n      this.SaltToHashDevices = `0${this.SaltToHashDevices}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n      this.SaltToHashDevices = `00${this.SaltToHashDevices}`;\n    }\n    const verifierDevicesNotPadded = this.g.modPow(\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\n      this.N);\n\n    const firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n    this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\n    if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n      this.verifierDevices = `0${this.verifierDevices}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n      this.verifierDevices = `00${this.verifierDevices}`;\n    }\n  }\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @returns {BigInteger} Computed large A.\n   * @private\n   */\n  calculateA(a) {\n    const A = this.g.modPow(a, this.N);\n\n    if (A.mod(this.N).toString() === '0') {\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\n    }\n    return A;\n  }\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n  calculateU(A, B) {\n    const firstCharA = A.toString(16)[0];\n    const firstCharB = B.toString(16)[0];\n    let AToHash = A.toString(16);\n    let BToHash = B.toString(16);\n\n    if (A.toString(16).length % 2 === 1) {\n      AToHash = `0${AToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n      AToHash = `00${AToHash}`;\n    }\n\n    if (B.toString(16).length % 2 === 1) {\n      BToHash = `0${BToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n      BToHash = `00${BToHash}`;\n    }\n\n    this.UHexHash = this.hexHash(AToHash + BToHash);\n    const finalU = new BigInteger(this.UHexHash, 16);\n\n    return finalU;\n  }\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {sjcl.bitArray} bitArray Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hash(bitArray) {\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n  hexHash(hexStr) {\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\n  }\n\n  /**\n   * Standard hkdf algorithm\n   * @param {sjcl.bitArray} ikm Input key material.\n   * @param {sjcl.bitArray} salt Salt value.\n   * @returns {sjcl.bitArray} Strong key material.\n   * @private\n   */\n  computehkdf(ikm, salt) {\n    const mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n    mac.update(ikm);\n    const prk = mac.digest();\n    const hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n    const infoBitsUpdate = sjcl.bitArray.concat(\n      this.infoBits,\n      sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n    hmac.update(infoBitsUpdate);\n\n    return sjcl.bitArray.clamp(hmac.digest(), 128);\n  }\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @returns {sjcl.bitArray} Computed HKDF value.\n   */\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\n      throw new Error('B cannot be zero.');\n    }\n\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n    if (this.UValue.equals(new BigInteger('0', 16))) {\n      throw new Error('U cannot be zero.');\n    }\n\n    const usernamePassword = `${this.poolName}${username}:${password}`;\n    const usernamePasswordHash = this.hash(usernamePassword);\n\n    const firstCharSalt = salt.toString(16)[0];\n    let SaltToHash = salt.toString(16);\n\n    if (salt.toString(16).length % 2 === 1) {\n      SaltToHash = `0${SaltToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n      SaltToHash = `00${SaltToHash}`;\n    }\n\n    const xValue = new BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\n    const gModPowXN = this.g.modPow(xValue, this.N);\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n    const sValue = intValue2.modPow(\n      this.smallAValue.add(this.UValue.multiply(xValue)),\n      this.N\n    ).mod(this.N);\n\n    let SToHash = sValue.toString(16);\n    const firstCharS = sValue.toString(16)[0];\n\n    if (sValue.toString(16).length % 2 === 1) {\n      SToHash = `0${SToHash}`;\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n      SToHash = `00${SToHash}`;\n    }\n\n    let UValueToHash = this.UHexHash;\n    const firstCharU = this.UHexHash[0];\n\n    if (this.UHexHash.length % 2 === 1) {\n      UValueToHash = `0${UValueToHash}`;\n    } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n      UValueToHash = `00${UValueToHash}`;\n    }\n\n    const hkdf = this.computehkdf(\n      sjcl.codec.hex.toBits(SToHash),\n      sjcl.codec.hex.toBits(UValueToHash));\n\n    return hkdf;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AuthenticationHelper.js\n **/","/*\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\n\n/** @class */\nexport default class CognitoAccessToken {\n  /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */\n  constructor({ AccessToken } = {}) {\n    // Assign object\n    this.jwtToken = AccessToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n    return expiration.exp;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoAccessToken.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\n\n/** @class */\nexport default class CognitoIdToken {\n  /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */\n  constructor({ IdToken } = {}) {\n    // Assign object\n    this.jwtToken = IdToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getJwtToken() {\n    return this.jwtToken;\n  }\n\n  /**\n   * @returns {int} the token's expiration (exp member).\n   */\n  getExpiration() {\n    const payload = this.jwtToken.split('.')[1];\n    const expiration = JSON.parse(\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n    return expiration.exp;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoIdToken.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoRefreshToken {\n  /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */\n  constructor({ RefreshToken } = {}) {\n    // Assign object\n    this.token = RefreshToken || '';\n  }\n\n  /**\n   * @returns {string} the record's token.\n   */\n  getToken() {\n    return this.token;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoRefreshToken.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as sjcl from 'sjcl';\nimport { BigInteger } from 'jsbn';\n\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n\n/** @class */\nexport default class CognitoUser {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   */\n  constructor(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n\n    this.client = data.Pool.client;\n\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n  getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  authenticateUser(authDetails, callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.pool.getUserPoolId().split('_')[1],\n      this.pool.getParanoia());\n    const dateHelper = new DateHelper();\n\n    let serverBValue;\n    let salt;\n    const authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n      authParameters.CHALLENGE_NAME = 'SRP_A';\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      AuthFlow: this.authenticationFlowType,\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: authDetails.getValidationData(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      this.username = challengeParameters.USER_ID_FOR_SRP;\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      salt = new BigInteger(challengeParameters.SALT, 16);\n      this.getCachedDeviceKeyAndPassword();\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.username,\n        authDetails.getPassword(),\n        serverBValue,\n        salt);\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n      mac.update(sjcl.codec.utf8String.toBits(this.pool.getUserPoolId().split('_')[1]));\n      mac.update(sjcl.codec.utf8String.toBits(this.username));\n      mac.update(secretBlockBits);\n      const dateNow = dateHelper.getNowString();\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\n      const signature = mac.digest();\n      const signatureString = sjcl.codec.base64.fromBits(signature);\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n      if (this.deviceKey != null) {\n        challengeResponses.DEVICE_KEY = this.deviceKey;\n      }\n\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n        ChallengeName: 'PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        const challengeName = dataAuthenticate.ChallengeName;\n        if (challengeName === 'SMS_MFA') {\n          this.Session = dataAuthenticate.Session;\n          return callback.mfaRequired(challengeName);\n        }\n\n        if (challengeName === 'CUSTOM_CHALLENGE') {\n          this.Session = dataAuthenticate.Session;\n          return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n        }\n\n        if (challengeName === 'DEVICE_SRP_AUTH') {\n          this.getDeviceResponse(callback);\n          return undefined;\n        }\n\n        this.signInUserSession = this.getCognitoUserSession(\n          dataAuthenticate.AuthenticationResult);\n        this.cacheTokens();\n\n        const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n        if (newDeviceMetadata == null) {\n          return callback.onSuccess(this.signInUserSession);\n        }\n\n        authenticationHelper.generateHashDevice(\n           dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n           dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n        const deviceSecretVerifierConfig = {\n          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n            authenticationHelper.getSaltDevices().toString(16))),\n          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n            authenticationHelper.getVerifierDevices().toString(16))),\n        };\n\n        this.verifierDevices = sjcl.codec.base64.fromBits(\n          authenticationHelper.getVerifierDevices());\n        this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n        this.randomPassword = authenticationHelper.getRandomPassword();\n\n        this.client.makeUnauthenticatedRequest('confirmDevice', {\n          DeviceKey: newDeviceMetadata.DeviceKey,\n          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent,\n        }, (errConfirm, dataConfirm) => {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n          this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          this.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(\n              this.signInUserSession,\n              dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(this.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   * @private\n   */\n  getDeviceResponse(callback) {\n    const authenticationHelper = new AuthenticationHelper(\n      this.deviceGroupKey,\n      this.pool.getParanoia());\n    const dateHelper = new DateHelper();\n\n    const authParameters = {};\n\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'DEVICE_SRP_AUTH',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: authParameters,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeParameters = data.ChallengeParameters;\n\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n      const salt = new BigInteger(challengeParameters.SALT, 16);\n\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\n        this.deviceKey,\n        this.randomPassword,\n        serverBValue,\n        salt);\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceGroupKey));\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceKey));\n      mac.update(secretBlockBits);\n      const dateNow = dateHelper.getNowString();\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\n      const signature = mac.digest();\n      const signatureString = sjcl.codec.base64.fromBits(signature);\n\n      const challengeResponses = {};\n\n      challengeResponses.USERNAME = this.username;\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n      challengeResponses.TIMESTAMP = dateNow;\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n        ClientId: this.pool.getClientId(),\n        ChallengeResponses: challengeResponses,\n        Session: data.Session,\n      }, (errAuthenticate, dataAuthenticate) => {\n        if (errAuthenticate) {\n          return callback.onFailure(errAuthenticate);\n        }\n\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n        this.cacheTokens();\n\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challange answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendCustomChallengeAnswer(answerChallenge, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      const challengeName = data.ChallengeName;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        this.Session = data.Session;\n        return callback.customChallenge(data.challengeParameters);\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\n      this.cacheTokens();\n      return callback.onSuccess(this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  sendMFACode(confirmationCode, callback) {\n    const challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n      ChallengeName: 'SMS_MFA',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n    }, (err, dataAuthenticate) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      this.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(this.signInUserSession);\n      }\n\n      const authenticationHelper = new AuthenticationHelper(\n        this.pool.getUserPoolId().split('_')[1],\n        this.pool.getParanoia());\n      authenticationHelper.generateHashDevice(\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\n      const deviceSecretVerifierConfig = {\n        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n          authenticationHelper.getSaltDevices().toString(16))),\n        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\n          authenticationHelper.getVerifierDevices().toString(16))),\n      };\n\n      this.verifierDevices = sjcl.codec.base64.fromBits(\n        authenticationHelper.getVerifierDevices());\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\n        .NewDeviceMetadata.DeviceGroupKey;\n      this.randomPassword = authenticationHelper.getRandomPassword();\n\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent,\n      }, (errConfirm, dataConfirm) => {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        this.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(\n            this.signInUserSession,\n            dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(this.signInUserSession);\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  changePassword(oldUserPassword, newUserPassword, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('changePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n    const mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number',\n    };\n    mfaOptions.push(mfaEnabled);\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    const mfaOptions = [];\n\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n\n  /**\n   * This is used by an authenticated user to delete himself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteUser(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  updateAttributes(attributes, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, userData) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const attributeList = [];\n\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\n        const attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value,\n        };\n        const userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  resendConfirmationCode(callback) {\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, err => {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const idTokenKey = `${keyPrefix}.idToken`;\n    const accessTokenKey = `${keyPrefix}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\n\n    const storage = window.localStorage;\n\n    if (storage.getItem(idTokenKey)) {\n      const idToken = new CognitoIdToken({\n        IdToken: storage.getItem(idTokenKey),\n      });\n      const accessToken = new CognitoAccessToken({\n        AccessToken: storage.getItem(accessTokenKey),\n      });\n      const refreshToken = new CognitoRefreshToken({\n        RefreshToken: storage.getItem(refreshTokenKey),\n      });\n\n      const sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n      };\n      const cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (refreshToken.getToken() == null) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    }\n    return undefined;\n  }\n\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n  refreshSession(refreshToken, callback) {\n    const authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n    const storage = window.localStorage;\n\n    if (storage.getItem(lastUserKey)) {\n      this.username = storage.getItem(lastUserKey);\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n    }, (err, authResult) => {\n      if (err) {\n        return callback(err, null);\n      }\n      if (authResult) {\n        const authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\n        this.cacheTokens();\n        return callback(null, this.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  cacheTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = window.localStorage;\n\n    storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  cacheDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = window.localStorage;\n\n    storage.setItem(deviceKeyKey, this.deviceKey);\n    storage.setItem(randomPasswordKey, this.randomPassword);\n    storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  getCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = window.localStorage;\n\n    if (storage.getItem(deviceKeyKey)) {\n      this.deviceKey = storage.getItem(deviceKeyKey);\n      this.randomPassword = storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  clearCachedDeviceKeyAndPassword() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\n\n    const storage = window.localStorage;\n\n    storage.removeItem(deviceKeyKey);\n    storage.removeItem(randomPasswordKey);\n    storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  clearCachedTokens() {\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\n\n    const storage = window.localStorage;\n\n    storage.removeItem(idTokenKey);\n    storage.removeItem(accessTokenKey);\n    storage.removeItem(refreshTokenKey);\n    storage.removeItem(lastUserKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  getCognitoUserSession(authResult) {\n    const idToken = new CognitoIdToken(authResult);\n    const accessToken = new CognitoAccessToken(authResult);\n    const refreshToken = new CognitoRefreshToken(authResult);\n\n    const sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken,\n    };\n\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgotPassword(callback) {\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  confirmPassword(confirmationCode, newPassword, callback) {\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @returns {void}\n   */\n  getAttributeVerificationCode(attributeName, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.inputVerificationCode(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('getDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  forgetDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      this.deviceKey = null;\n      this.deviceGroupkey = null;\n      this.randomPassword = null;\n      this.clearCachedDeviceKeyAndPassword();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered',\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('listDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken,\n    }, (err, data) => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  globalSignOut(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n    }, err => {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      this.clearCachedTokens();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  signOut() {\n    this.signInUserSession = null;\n    this.clearCachedTokens();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUser.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserAttribute {\n  /**\n   * Constructs a new CognitoUserAttribute object\n   * @param {string=} Name The record's name\n   * @param {string=} Value The record's value\n   */\n  constructor({ Name, Value } = {}) {\n    this.Name = Name || '';\n    this.Value = Value || '';\n  }\n\n  /**\n   * @returns {string} the record's value.\n   */\n  getValue() {\n    return this.Value;\n  }\n\n  /**\n   * Sets the record's value.\n   * @param {string} value The new value.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setValue(value) {\n    this.Value = value;\n    return this;\n  }\n\n  /**\n   * @returns {string} the record's name.\n   */\n  getName() {\n    return this.Name;\n  }\n\n  /**\n   * Sets the record's name\n   * @param {string} name The new name.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */\n  setName(name) {\n    this.Name = name;\n    return this;\n  }\n\n  /**\n   * @returns {string} a string representation of the record.\n   */\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * @returns {object} a flat object representing the record.\n   */\n  toJSON() {\n    return {\n      Name: this.Name,\n      Value: this.Value,\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserAttribute.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class CognitoUserSession {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {string} IdToken The session's Id token.\n   * @param {string=} RefreshToken The session's refresh token.\n   * @param {string} AccessToken The session's access token.\n   */\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n  getIdToken() {\n    return this.idToken;\n  }\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time\n   * @returns {boolean} if the session is still valid\n   */\n  isValid() {\n    const now = Math.floor(new Date() / 1000);\n\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserSession.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst monthNames =\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n/** @class */\nexport default class DateHelper {\n  /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */\n  getNowString() {\n    const now = new Date();\n\n    const weekDay = weekNames[now.getUTCDay()];\n    const month = monthNames[now.getUTCMonth()];\n    const day = now.getUTCDate();\n\n    let hours = now.getUTCHours();\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n\n    let minutes = now.getUTCMinutes();\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    let seconds = now.getUTCSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    const year = now.getUTCFullYear();\n\n    // ddd MMM D HH:mm:ss UTC YYYY\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\n\n    return dateNow;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/DateHelper.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"AWSCognito\",\"commonjs2\":\"aws-sdk\",\"commonjs\":\"aws-sdk\",\"amd\":\"aws-sdk\"}\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"window\",\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n ** module id = 11\n ** module chunks = 0\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nexport default class AuthenticationDetails {\n  /**\n   * Constructs a new AuthenticationDetails object\n   * @param {object=} data Creation options.\n   * @param {string} data.Username User being authenticated.\n   * @param {string} data.Password Plain-text password to authenticate with.\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n   */\n  constructor(data) {\n    const { ValidationData, Username, Password } = data || {};\n    this.validationData = ValidationData || [];\n    this.username = Username;\n    this.password = Password;\n  }\n\n  /**\n   * @returns {string} the record's username\n   */\n  getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {string} the record's password\n   */\n  getPassword() {\n    return this.password;\n  }\n\n  /**\n   * @returns {Array} the record's validationData\n   */\n  getValidationData() {\n    return this.validationData;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AuthenticationDetails.js\n **/","/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CognitoIdentityServiceProvider } from 'aws-sdk';\n\nimport CognitoUser from './CognitoUser';\n\n/** @class */\nexport default class CognitoUserPool {\n  /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {int=} data.Paranoia Random number generation paranoia level.\n   */\n  constructor(data) {\n    const { UserPoolId, ClientId, Paranoia } = data || {};\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n    const region = UserPoolId.split('_')[0];\n\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.paranoia = Paranoia || 0;\n\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\n  }\n\n  /**\n   * @returns {string} the user pool id\n   */\n  getUserPoolId() {\n    return this.userPoolId;\n  }\n\n  /**\n   * @returns {string} the client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * @returns {int} the paranoia level\n   */\n  getParanoia() {\n    return this.paranoia;\n  }\n\n  /**\n   * sets paranoia level\n   * @param {int} paranoia The new paranoia level.\n   * @returns {void}\n   */\n  setParanoia(paranoia) {\n    this.paranoia = paranoia;\n  }\n\n  /**\n   * @typedef {object} SignUpResult\n   * @property {CognitoUser} user New user.\n   * @property {bool} userConfirmed If the user is already confirmed.\n   */\n  /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @returns {void}\n   */\n  signUp(username, password, userAttributes, validationData, callback) {\n    this.client.makeUnauthenticatedRequest('signUp', {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n    }, (err, data) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      const cognitoUser = {\n        Username: username,\n        Pool: this,\n      };\n\n      const returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n      };\n\n      return callback(null, returnData);\n    });\n  }\n\n\n  /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */\n  getCurrentUser() {\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\n    const storage = window.localStorage;\n\n    const lastAuthUser = storage.getItem(lastUserKey);\n    if (lastAuthUser) {\n      const cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n      };\n\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserPool.js\n **/"],"sourceRoot":""}