AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  S3ConfigPath:
    Default: s3://my-bucket/prefix/config-file.json
    Description: Configuration File for this Utility instance
    Type: String
    AllowedPattern: ^s3:\/\/([A-z\-]+)\/(.*)$
  SecurityGroups:
    Default: mygroup1, mygroup2
    Description: Security Groups as CSV list to use for the deployed function (may be required for Redshift security policy)
    Type: CommaDelimitedList
  SubnetIds:
    Default: subnet1, subnet2, subnet3
    Description: List of private Subnets in VPC in which the function will egress network connections
    Type: CommaDelimitedList
  ColumnEncodingCronExpression:
    Default: 0 0 * * ? *
    Description: Cron expression for when to run the Column Encoding Utility (default midnight daily)
    Type: String
    AllowedPattern: ^([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|W) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|\#) ([0-59]|\*|\,|\-|\/)$
  AnalyzeVacuumCronExpression:
    Default: 0 1 * * ? *
    Description: Cron expression for when to run the Analyze Vacuum Utility (default 1 am daily)
    Type: String
    AllowedPattern: ^([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|W) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|\#) ([0-59]|\*|\,|\-|\/)$
  MonitorCronExpression:
    Default: 5 * * * ? *
    Description: Cron expression for when to run Monitoring (default 5 minutes past every hour)
    Type: String
    AllowedPattern: ^([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|W) ([0-59]|\*|\,|\-|\/) ([0-59]|\*|\,|\-|\/|\?|L|\#) ([0-59]|\*|\,|\-|\/)$
Resources:
  LambdaRedshiftAutomation:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.event_handler
      Runtime: python2.7
      CodeUri:
        Bucket: !Sub awslabs-code-${AWS::Region}
        Key: LambdaRedshiftRunner/lambda-redshift-util-runner-1.2.zip
      MemorySize: 192
      Timeout: 300
      Tags:
        Name: LambdaRedshiftRunner
      Role: !GetAtt RedshiftAutomationIAMRole.Arn
      VpcConfig:
        SecurityGroupIds:
          !Ref SecurityGroups
        SubnetIds:
          !Ref SubnetIds
  RedshiftAutomationIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: "LambdaRedshiftAutomationRole"
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Policies:
          -
            PolicyName: "LambdaRedshiftRunnerPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "kms:Decrypt"
                    - "cloudwatch:PutMetricData"
                  Resource: "*"
  AnalyzeVacuumEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: CloudWatch Events Rule to Invoke Lambda Runner - Analyze Vacuum Utility
      Name: InvokeLambdaRedshiftRunner-AnalyzeVacuumUtility
      ScheduleExpression: !Sub cron(${AnalyzeVacuumCronExpression})
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaRedshiftAutomation.Arn
          Id: RedshiftAnalyzeVacuumUtility
          Input:
            !Sub |
                {
                  "ExecuteUtility":"AnalyzeVacuumUtility",
                  "ConfigLocation":"${S3ConfigPath}"
                }
  CWEventsInvokeAnalyzeVacuumPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaRedshiftAutomation.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt AnalyzeVacuumEventRule.Arn

  ColumnEncodingEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: CloudWatch Events Rule to Invoke Lambda Runner - Column Encoding Utility
      Name: InvokeLambdaRedshiftRunner-ColumnEncodingUtility
      ScheduleExpression: !Sub cron(${ColumnEncodingCronExpression})
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaRedshiftAutomation.Arn
          Id: RedshiftColumnEncodingUtility
          Input:
            !Sub |
                {
                  "ExecuteUtility":"ColumnEncodingUtility",
                  "ConfigLocation":"${S3ConfigPath}"
                }
  CWEventsInvokeColumnEncodingPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaRedshiftAutomation.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt ColumnEncodingEventRule.Arn

  MonitoringEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: CloudWatch Events Rule to Invoke Lambda Runner - Redshift Monitoring
      Name: InvokeLambdaRedshiftRunner-MonitoringUtility
      ScheduleExpression: !Sub cron(${MonitorCronExpression})
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaRedshiftAutomation.Arn
          Id: RedshiftMonitoringUtility
          Input:
            !Sub |
                {
                  "ExecuteUtility":"Monitoring",
                  "ConfigLocation":"${S3ConfigPath}"
                }
  CWEventsInvokeMonitoringPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaRedshiftAutomation.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt MonitoringEventRule.Arn